# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai", # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- **NUEVO**: Para ejecutar los dashboards, usar siempre `ejecutar_todos_dashboards.py` en lugar de ejecutar dashboards individuales.
- **NUEVO**: Siempre crear ramas para preservar trabajo importante, especialmente scripts de captura y funcionalidades complejas.
- **NUEVO**: Cuando hagas actualizaciones del código de dashboards, NO ejecutes un nuevo proceso en background. En su lugar, informa al usuario que debe refrescar la página del dashboard existente o reiniciar el proceso manualmente. Esto evita tener múltiples procesos corriendo y problemas de puertos ocupados.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- **NUEVO**: Archivo (5) tiene columna región, archivo (6) NO tiene columna región
- **NUEVO**: Los scripts de captura de screenshots son funcionalidades complejas que deben preservarse en ramas separadas

# Scratchpad

## Nueva Tarea: Filtros de Métricas en Gráficos de Evolución ✅

**Task:** Agregar filtros de métricas en los gráficos de evolución del dashboard detallado (8056):
- Permitir elegir entre conversiones y gasto para cada eje Y
- Permitir elegir entre CPC y costo por conversión para cada eje Y
- Mantener la funcionalidad existente de filtros por público y tipo de anuncio

**Progreso:**
[X] Agregar filtros de métricas en el layout
[X] Actualizar callback para incluir nuevos inputs
[X] Implementar lógica dinámica para gráfico de conversiones
[X] Implementar lógica dinámica para gráfico de costos
[X] Actualizar títulos de ejes dinámicamente
[X] Actualizar colores según métricas seleccionadas

**Plan:**
1. ✅ Agregar dropdowns de filtros de métricas en el layout
2. ✅ Actualizar callback con nuevos parámetros
3. ✅ Implementar lógica condicional para métricas
4. ✅ Actualizar títulos y colores dinámicamente
5. ✅ Probar funcionalidad

**Funcionalidades Implementadas:**
- ✅ **Filtros de Métricas Conversiones**: Eje Y izquierdo y derecho pueden mostrar conversiones o gasto
- ✅ **Filtros de Métricas Costos**: Eje Y izquierdo y derecho pueden mostrar CPC o costo por conversión
- ✅ **Títulos Dinámicos**: Los títulos de los ejes se actualizan según la métrica seleccionada
- ✅ **Colores Dinámicos**: Los colores de las líneas y ejes cambian según la métrica
- ✅ **Hover Templates**: Los tooltips se adaptan a la métrica mostrada
- ✅ **Compatibilidad**: Mantiene todos los filtros existentes (público, tipo de anuncio)

**Configuración de Filtros:**
- ✅ **Gráfico Conversiones**: 
  - Eje Y Izquierdo: Ninguno, Conversiones o Gasto
  - Eje Y Derecho: Ninguno, Conversiones o Gasto
- ✅ **Gráfico Costos**:
  - Eje Y Izquierdo: Ninguno, CPC o Costo por Conversión
  - Eje Y Derecho: Ninguno, CPC o Costo por Conversión

**Colores Implementados:**
- ✅ **Conversiones**: Verde (COLORS['income'])
- ✅ **Gasto**: Rojo (COLORS['expense'])
- ✅ **CPC**: Púrpura (#9b59b6)
- ✅ **Costo por Conversión**: Naranja (#e67e22)

**Funcionalidades Adicionales:**
- ✅ **Opción "Ninguno"**: Permite ocultar completamente un eje Y
- ✅ **Layout Dinámico**: Los ejes se configuran solo si están activos
- ✅ **Flexibilidad Total**: Puedes mostrar 0, 1 o 2 métricas por gráfico

**Estado:** ✅ COMPLETADO - Filtros de métricas funcionando correctamente

---

## Nueva Tarea: Recuperar Trabajo Completo - Scripts de Captura ✅

**Task:** Recuperar todo el trabajo de scripts de captura de dashboards que se había perdido:
- Recuperar desde commit 777a560 con integración de cuenta corriente
- Recrear todos los scripts de captura de screenshots
- Preservar trabajo de integración automática

**Progreso:**
[X] Identificar commit con trabajo perdido (777a560)
[X] Crear rama recuperar-trabajo-completo desde ese commit
[X] Recrear script principal capturar_dashboards.py
[X] Recrear capturar_dashboards_simple.py
[X] Recrear capturar_dashboards_con_filtros.py
[X] Recrear capturar_dashboards_automatico.py
[X] Recrear capturar_dashboards_basico.py
[X] Commit y push de todo el trabajo recuperado
[X] Actualizar documentación

**Plan:**
1. ✅ Recuperar desde commit 777a560
2. ✅ Crear rama para preservar trabajo
3. ✅ Recrear todos los scripts de captura
4. ✅ Verificar funcionalidad
5. ✅ Commit y push
6. ✅ Documentar recuperación

**Scripts Recreados:**
- ✅ `capturar_dashboards.py`: Script principal con menú interactivo
- ✅ `capturar_dashboards_simple.py`: Captura simple automática
- ✅ `capturar_dashboards_con_filtros.py`: Captura con filtros de fecha
- ✅ `capturar_dashboards_automatico.py`: Usa ejecutar_todos_dashboards.py
- ✅ `capturar_dashboards_basico.py`: Captura manual

**Funcionalidades Implementadas:**
- ✅ Captura automática de screenshots con Playwright
- ✅ Filtros de fecha: Día, Semana, Mes
- ✅ Organización por carpetas con fecha
- ✅ Inicio automático de dashboards
- ✅ Captura manual para dashboards ya ejecutándose
- ✅ Menú interactivo para elegir tipo de captura

**Organización de Capturas:**
- ✅ screenshots_YYYY-MM-DD/: Capturas simples
- ✅ screenshots_YYYY-MM-DD/dia/: Filtro día
- ✅ screenshots_YYYY-MM-DD/semana/: Filtro semana  
- ✅ screenshots_YYYY-MM-DD/mes/: Filtro mes
- ✅ screenshots_manual_YYYY-MM-DD/: Capturas manuales
- ✅ screenshots_automatico_YYYY-MM-DD/: Capturas automáticas

**Dashboards Soportados:**
- ✅ Dashboard Reservas (puerto 8050)
- ✅ Dashboard Utilidad (puerto 8055)
- ✅ Dashboard Marketing (puerto 8056)

**Rama Creada:**
- ✅ `recuperar-trabajo-completo`: Rama con todo el trabajo recuperado
- ✅ Push exitoso a origin/recuperar-trabajo-completo

**Estado:** ✅ COMPLETADO - Trabajo completo recuperado y funcional

---

## Nueva Tarea: Integración Automática de Cuenta Corriente ✅

**Task:** Modificar el procesamiento para que los datos de cuenta corriente se integren automáticamente a los archivos finales:
- Cargos de cuenta corriente → se suman a `gastos hotboat.csv`
- Abonos de cuenta corriente → se suman a `abonos hotboat.csv`

**Progreso:**
[X] Modificar flujo en gastos_hotboat_sin_drive.py
[X] Implementar integración automática de cargos a gastos
[X] Implementar integración automática de abonos a abonos
[X] Probar procesamiento completo
[X] Verificar integración correcta
[X] Documentar funcionalidad

**Plan:**
1. ✅ Modificar sección de procesamiento de cuenta corriente
2. ✅ Agregar integración automática con archivos principales
3. ✅ Mantener archivos de referencia separados
4. ✅ Probar con datos reales
5. ✅ Verificar outputs finales

**Funcionalidades Implementadas:**
- ✅ **Integración Automática**: Los cargos de cuenta corriente se suman automáticamente a `gastos hotboat.csv`
- ✅ **Integración Automática**: Los abonos de cuenta corriente se suman automáticamente a `abonos hotboat.csv`
- ✅ **Deduplicación**: Se eliminan duplicados basados en Fecha, Descripción y Monto
- ✅ **Archivos de Referencia**: Se mantienen archivos separados `cuenta_corriente_cargos.csv` y `cuenta_corriente_abonos.csv`
- ✅ **Logging Detallado**: Output informativo con cantidad de filas integradas

**Flujo Actualizado:**
1. ✅ Procesar archivos de cuenta corriente (cartola*.xls)
2. ✅ Consolidar cargos y abonos
3. ✅ **NUEVO**: Leer archivos principales existentes
4. ✅ **NUEVO**: Integrar cargos a gastos hotboat.csv
5. ✅ **NUEVO**: Integrar abonos a abonos hotboat.csv
6. ✅ Exportar archivos de referencia

**Resultados del Test:**
- ✅ **Cargos**: 75 filas integradas a gastos hotboat.csv
- ✅ **Abonos**: 35 filas integradas a abonos hotboat.csv
- ✅ **Total gastos**: 577 filas (incluyendo cuenta corriente)
- ✅ **Total abonos**: 122 filas (incluyendo cuenta corriente)

**Beneficios:**
- ✅ **Proceso Unificado**: Un solo comando integra todos los datos
- ✅ **Datos Consolidados**: Archivos finales contienen toda la información
- ✅ **Trazabilidad**: Archivos de referencia permiten auditoría
- ✅ **Automatización**: No requiere pasos manuales adicionales

**Estado:** ✅ COMPLETADO - Integración automática funcionando correctamente

---

## Nueva Tarea: Simplificar gastos_hotboat_sin_drive.py ✅

**Task:** Reorganizar el código de gastos_hotboat_sin_drive.py para hacerlo más fácil de leer:
- Mover funciones a funciones/funciones.py
- Dejar el archivo principal más limpio y legible
- Mantener toda la funcionalidad existente

**Progreso:**
[X] Revisar el archivo actual gastos_hotboat_sin_drive.py
[X] Identificar funciones que se pueden mover
[X] Crear clase ProcesadorArchivos en funciones/funciones.py
[X] Crear función procesar_archivos_financieros en funciones/funciones.py
[X] Simplificar el archivo principal gastos_hotboat_sin_drive.py
[X] Probar que funcione correctamente
[X] Verificar que procese los mismos archivos y genere los mismos outputs

**Plan:**
1. ✅ Analizar estructura actual del archivo
2. ✅ Mover clase ProcesadorArchivos a funciones/funciones.py
3. ✅ Mover función procesar_archivos_financieros a funciones/funciones.py
4. ✅ Simplificar archivo principal a solo configuración y llamada
5. ✅ Probar funcionamiento
6. ✅ Verificar outputs

**Archivos Modificados:**
- ✅ `funciones/funciones.py` - Agregadas nuevas funciones de procesamiento
- ✅ `gastos_hotboat_sin_drive.py` - Simplificado drásticamente (de ~300 líneas a ~50 líneas)

**Funcionalidades Movidas:**
- ✅ Clase ProcesadorArchivos con métodos procesar_archivo() y consolidar_datos()
- ✅ Función procesar_archivos_financieros() completa
- ✅ Toda la lógica de procesamiento de archivos Excel
- ✅ Manejo de errores y logging

**Archivo Principal Simplificado:**
- ✅ Solo configuración de parámetros
- ✅ Importación de función principal
- ✅ Llamada simple a procesar_archivos_financieros()
- ✅ Manejo básico de errores
- ✅ Mucho más fácil de leer y mantener

**Estado:** ✅ COMPLETADO - Archivo simplificado y funcional

---

## Nueva Tarea: Actualizar Dashboard Marketing con Inputs (5) y (6) ✅

**Task:** Actualizar dashboard de marketing para usar nuevos archivos de input:
- Comp-1-Conjunto-Anuncios-2Campañas-3-anuncios-por-dia (5) - CON región
- Comp-1-Conjunto-Anuncios-2Campañas-3-anuncios-por-dia (6) - SIN región

**Progreso:**
[X] Revisar archivos de input disponibles (5) y (6)
[X] Modificar dashboard_marketing_simple.py para usar nuevos archivos
[X] Verificar que los archivos existan en la estructura
[X] Ejecutar dashboard con los nuevos inputs usando ejecutar_todos_dashboards.py
[X] Verificar funcionamiento correcto
[X] **NUEVO**: Corregir clasificación de tipos de anuncios
[X] **NUEVO**: Mejorar gráfico de evolución temporal con conversiones

**Plan:**
1. ✅ Buscar archivos (5) y (6) en la estructura de archivos
2. ✅ Modificar la función cargar_datos() en dashboard_marketing_simple.py
3. ✅ Actualizar cualquier referencia a los archivos anteriores
4. ✅ Ejecutar usando ejecutar_todos_dashboards.py
5. ✅ Verificar que funcione correctamente
6. ✅ **NUEVO**: Corregir clasificación de "Video pareja dcto" vs "Video parejas dcto"
7. ✅ **NUEVO**: Agregar conversiones al gráfico de evolución temporal

**Archivos Modificados:**
- ✅ `dashboard_marketing_simple.py` - Actualizado para usar archivos (5) y (6)
- ✅ Función `cargar_datos()` modificada con nuevos inputs
- ✅ Mensajes de output actualizados para reflejar nuevos archivos
- ✅ **NUEVO**: Clasificación de tipos de anuncios corregida
- ✅ **NUEVO**: Gráfico de evolución temporal mejorado

**Corrección Importante:**
- ✅ Archivo (5): CON región - para gráfico de regiones
- ✅ Archivo (6): SIN región - para demás gráficos
- ✅ **NUEVO**: Corregida clasificación para incluir "Video pareja dcto" (sin 's')

**Problema Identificado y Solucionado:**
- ❌ Anuncios "Video pareja dcto" (sin 's') se clasificaban como "Otro"
- ✅ Corregida clasificación para incluir tanto "parejas dcto" como "pareja dcto"
- ✅ Esto afectaba la suma en "Análisis por Tipos de Anuncios"

**Mejoras Implementadas:**
- ✅ **NUEVO**: Gráfico de evolución temporal ahora incluye conversiones
- ✅ Dos ejes Y: Gasto (izquierda) y Conversiones (derecha)
- ✅ Diferentes colores y marcadores para distinguir las métricas
- ✅ Leyenda horizontal en la parte superior

**Estado:** ✅ COMPLETADO - Dashboard funcionando con archivos (5) y (6), clasificación corregida y gráfico mejorado

**URLs Dashboard:**
- 🌐 Marketing: http://localhost:8056 ✅ ACTIVO
- 🌐 Reservas: http://localhost:8050 ✅ ACTIVO
- 🌐 Utilidad: http://localhost:8055 ✅ ACTIVO

---

## Tarea Completada: Dashboard Marketing con Inputs Específicos ✅

**Task:** Ejecutar dashboard de marketing con inputs específicos:
- Comp-1-Conjunto-Anuncios-2Campañas-3-anuncios-por-dia (5)
- Comp-1-Conjunto-Anuncios-2Campañas-3-anuncios-por-dia (6)

**Progreso:**
[X] Revisar estructura del dashboard de marketing
[X] Identificar cómo maneja los inputs
[X] Modificar código para usar archivos específicos (3) y (4)
[X] Ejecutar dashboard con los nuevos parámetros especificados
[X] Verificar funcionamiento correcto
[X] Modificar clasificación de públicos para mantener regiones separadas

**Archivos Modificados:**
- ✅ `dashboard_marketing_simple.py` - Actualizado para usar archivos (3) y (4)
- ✅ Función `cargar_datos()` modificada con nuevos inputs
- ✅ Función `clasificar_publico()` actualizada para mantener todas las regiones separadas

**Funcionalidades Implementadas:**
- Dataset (3): Sin región - para gráficos generales  
- Dataset (4): Con región - para análisis geográfico
- Output informativo con emojis para claridad
- Procesamiento de datos actualizado
- **NUEVO**: Públicos separados por región (Advantage, Pucón, Concepción, Valdivia, Temuco)

**URLs Dashboard:**
- 🌐 Marketing: http://localhost:8056 (PID: 43044) ✅ ACTIVO

**Cambios Recientes:**
- ✅ Eliminada agrupación en "Otros" para públicos
- ✅ Cada región/público mantiene su identidad separada
- ✅ Dashboard reiniciado con nueva configuración

**Estado:** ✅ COMPLETADO - Dashboard funcionando con regiones separadas

---

## Tarea Completada: Ejecutor Múltiple de Dashboards ✅

**Task:** Crear un código que ejecute los 3 dashboards simultáneamente y actualizar documentación

**Progreso:**
[X] Crear archivo `ejecutar_todos_dashboards.py` con multiprocessing
[X] Actualizar `NAVEGACION_DASHBOARDS.md` con nueva opción
[X] Actualizar `README.md` con información completa
[X] Agregar verificación de archivos y manejo de errores
[X] Agregar banner y output informativo

**Archivos Modificados/Creados:**
- ✅ `ejecutar_todos_dashboards.py` - Ejecutor múltiple usando multiprocessing
- ✅ `NAVEGACION_DASHBOARDS.md` - Agregada nueva opción como recomendada
- ✅ `README.md` - Sección completa con ejemplo de output
- ✅ `.cursorrules` - Actualizado scratchpad

**Funcionalidades Implementadas:**
- Ejecución simultánea de 3 dashboards (puertos 8050, 8055, 8056)
- Verificación automática de archivos necesarios
- Manejo limpio de procesos con Ctrl+C
- Output informativo con URLs y estado
- Compatible con Windows (configuración spawn)
- Manejo de errores y limpieza de procesos

**Comando Principal:**
```bash
python ejecutar_todos_dashboards.py
```

**Estado:** ✅ COMPLETADO - Listo para usar

---

## Nueva Tarea: Top Performers y Necesita Atención en Dashboard Detallado ✅

**Task:** Agregar sección de "Top Performers" y "Necesita Atención" del dashboard simplificado (8057) al dashboard detallado (8056):
- Top Performers: Basado en mejor costo por conversión (menor costo = mejor)
- Necesita Atención: Combinaciones público-video sin conversiones pero con gasto

**Progreso:**
[X] Implementar lógica de Top Performers por costo por conversión
[X] Implementar lógica de Necesita Atención para sin conversiones
[X] Agregar sección al layout del dashboard detallado
[X] Actualizar callback para incluir nueva sección
[X] Agregar manejo de casos edge (sin datos)

**Plan:**
1. ✅ Implementar cálculo de métricas por combinación público-tipo
2. ✅ Crear lógica de Top Performers (mejor costo por conversión)
3. ✅ Crear lógica de Necesita Atención (sin conversiones + gasto)
4. ✅ Agregar sección al layout
5. ✅ Actualizar callback y outputs

**Funcionalidades Implementadas:**
- ✅ **Top Performers**: Top 3 combinaciones con mejor costo por conversión
- ✅ **Necesita Atención**: Top 3 combinaciones sin conversiones pero con gasto
- ✅ **Métricas Detalladas**: Muestra costo por conversión, conversiones, gasto, clics
- ✅ **Manejo de Casos Edge**: Mensajes cuando no hay datos
- ✅ **Diseño Responsivo**: Layout flexible que se adapta al contenido

**Lógica de Selección:**
- ✅ **Top Performers**: 
  - Filtra solo combinaciones con conversiones > 0
  - Ordena por menor costo por conversión
  - Muestra top 3
- ✅ **Necesita Atención**:
  - Filtra combinaciones con conversiones = 0 y gasto > 0
  - Ordena por mayor gasto (prioriza los que más dinero han gastado)
  - Muestra top 3

**Información Mostrada:**
- ✅ **Top Performers**: Combinación, Costo/Conv, Conversiones, Gasto
- ✅ **Necesita Atención**: Combinación, Gasto, Conversiones, Clics
- ✅ **Colores**: Verde para top performers, rojo para necesita atención

**Mensajes Especiales:**
- ✅ "🎉 ¡Excelente! Todas las combinaciones han tenido conversiones" (cuando no hay que necesita atención)
- ✅ "⚠️ No hay combinaciones con conversiones en este período" (cuando no hay top performers)

**Estado:** ✅ COMPLETADO - Sección agregada al dashboard detallado

---

## Nueva Tarea: Filtros de Métricas en Gráficos de Evolución ✅